// Generated by LiveScript 1.2.0
var async, EventEmitter, State, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
async = require('async');
EventEmitter = require('events').EventEmitter;
out$.State = State = (function(superclass){
  var prototype = extend$((import$(State, superclass).displayName = 'State', State), superclass).prototype, constructor = State;
  function State(fsm, name, options){
    var i$, ref$, len$, v;
    this.fsm = fsm != null ? fsm : null;
    this.name = name;
    this.enterMiddleware = [];
    this.leaveMiddleware = [];
    this.events = options.events || {};
    if (options.attachTarget != null) {
      this.attachTarget = options.attachTarget;
    }
    if (options.enter != null) {
      this.enterUsing(options.enter);
    }
    if (options.leave != null) {
      this.leaveUsing(options.leave);
    }
    if (options.middleware != null) {
      for (i$ = 0, len$ = (ref$ = options.middleware).length; i$ < len$; ++i$) {
        v = ref$[i$];
        if (v.enter != null) {
          this.enterUsing(v.enter);
        }
        if (v.leave != null) {
          this.leaveUsing(v.leave);
        }
      }
    }
  }
  prototype.enter = function(){
    var k, ref$, v, this$ = this;
    if (this.attachTarget != null) {
      for (k in ref$ = this.events) {
        v = ref$[k];
        this.attachTarget[k] = v;
      }
    }
    async.series(this.enterMiddleware, function(){
      this$.emit('entered');
    });
  };
  prototype.leave = function(){
    var this$ = this;
    async.series(this.leaveMiddleware, function(){
      var k, ref$, v;
      if (this$.attachTarget != null) {
        for (k in ref$ = this$.events) {
          v = ref$[k];
          delete this$.attachTarget[k];
        }
      }
      this$.emit('left');
    });
  };
  prototype.enterUsing = function(fn){
    this.enterMiddleware.unshift(fn);
  };
  prototype.leaveUsing = function(fn){
    this.leaveMiddleware.unshift(fn);
  };
  prototype.trigger = function(event){
    var args, handler;
    args = slice$.call(arguments, 1);
    handler = this.events[event];
    if (handler != null) {
      handler.apply(this, args);
    }
  };
  prototype.transition = function(){
    var args, ref$;
    args = slice$.call(arguments);
    if ((ref$ = this.fsm) != null) {
      ref$.transition.apply(ref$, args);
    }
  };
  return State;
}(EventEmitter));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}