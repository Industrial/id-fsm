// Generated by LiveScript 1.2.0
var EventEmitter, State, StateMachine, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
EventEmitter = require('events').EventEmitter;
State = require('./State').State;
out$.StateMachine = StateMachine = (function(superclass){
  var prototype = extend$((import$(StateMachine, superclass).displayName = 'StateMachine', StateMachine), superclass).prototype, constructor = StateMachine;
  function StateMachine(options){
    var k, ref$, v;
    this.states = {};
    if (options.attachTarget != null) {
      this.attachTarget = options.attachTarget;
    }
    for (k in ref$ = options.states) {
      v = ref$[k];
      if (this.attachTarget != null) {
        v.attachTarget = this.attachTarget;
      }
      this.addState(new State(this, k, v));
    }
    this.transition(options.initialState);
  }
  prototype.addState = function(state){
    this.states[state.name] = state;
  };
  prototype.trigger = function(event){
    var args, currentState;
    args = slice$.call(arguments, 1);
    currentState = this.states[this.currentState.name];
    currentState.trigger.apply(currentState, [event].concat(slice$.call(args)));
  };
  prototype.transition = function(name){
    var enter, leave, this$ = this;
    enter = function(cb){
      this$.currentState = this$.states[name];
      this$.currentState.once('entered', function(){
        this$.emit('transitioned', name);
      });
      this$.currentState.enter();
    };
    leave = function(cb){
      this$.currentState.once('left', function(){
        this$.emit('transitioned', name);
        cb();
      });
      this$.currentState.leave();
    };
    if (this.currentState != null) {
      leave(function(){
        enter();
      });
    } else {
      enter();
    }
  };
  return StateMachine;
}(EventEmitter));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}